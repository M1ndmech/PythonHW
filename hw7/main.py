'''
Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам стоит написать программу. 
Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. 
Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами. 
Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает в программу с клавиатуры. 
В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке 
Ввод: пара-ра-рам рам-пам-папам па-ра-па-дам
Вывод: Парам пам-пам
'''

def str_counter_list (input_list, benchlist):
    count_list = []
    for part in input_list:
       count_list.append(sum(map(lambda item, sum = 0: sum + 1 if item in benchlist else sum, part)))
    return count_list

# как корректно прописать без цикла список, вложенный в список, являющийся аргументом? 
# Постоянно ловлю ошибки синтаксиса, оставил рабочую версию

input_Pooh = input("Введите стих или нажмите Enter:") or "пара-ра-рам рам-пам-папам па-ра-па-дам"
list_Pooh = input_Pooh.split(" ")
vowels = ("а", "у", "о", "ы", "э", "я", "ю", "ё", "и", "е")

if len(set(str_counter_list(list_Pooh, vowels))) == 1:
    print("Парам пам-пам")
else: print ("Пам парам")


'''
Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), которая принимает в качестве аргумента функцию, 
вычисляющую элемент по номеру строки и столбца. 
Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны. 
Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у операции умножения.

print_operation_table(lambda x, y: x * y)  
Вывод: таблица умножения от 1 до 6 (1:36)
'''

def print_operation_table(operation, numRows=6, numColumns=6):
    for row in range(1, numRows+1):
        for column in range(1, numColumns+1):
            print(operation(row,column), end='\t')
        print(" ")

print_operation_table(lambda x, y: x*y)
